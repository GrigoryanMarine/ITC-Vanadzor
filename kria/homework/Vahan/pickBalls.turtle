kturtle-script-v1.0
###!
# All functions should be commented properly
###!

###!
# Do not use fixed values, assign them to the variables. This will help you to avoid miscalculations and will make the code more readable
###!

###!
# Add explanation of the game in the beginning
###!

###!
# When it's player turn do not show the mesage box 2 times, you can notify it using only ask
###!

###!
# In case of having big k and n, the balls are drown outside of the box it should be fixed. Preferable fix is making the size of balls dynamic and / or numbering the balls and using "scrolling" effect
###!

###!
# Try to devide play_game function to small parts
###!

###!
# Correct the coding styles !!!
###!

###!
# The message you are shown in the message box is shown partly; fix this
###!

###!
# Add validation for the case if payer won. Now you just showing "You lost". What's if in one case the player win? Even if it's not possible the case shoul dbe properly considered.
###!

###!
# Try to fix issue related to showing ask box 2 times
###!

###!
# Please do the notes above and let me know. I will review the sources deeper and provide you my final feedback :)
# Good job, thanks for it
###!
@(reset)
$x=24
$y=389
$x_1=24
$y_1=169
$x_2=224
$y_2=169

@(learn) draw_canvas {
  @(canvascolor) 0@(,)255@(,)255
  @(gox) 0
   @(turnright) 90
  @(forward) 400
  @(center)
  @(turnleft) 90
  @(forward) 200
  #gox 0
  #print "player"
  @(gox) 200
  @(print) "computer"
  @(go) 0@(,) 180
  @(turnright) 90
  @(forward) 400

}

@(learn) circle {
  @(repeat) 36 {
    @(forward) 2
    @(turnleft) 10
  }
}
@(learn) print_circles $balls {
  @(repeat) $balls {
    @(if) $x>400 {
      $x=24
      $y=$y-23.5
    }
  @(go) $x@(,) $y
  circle  
  $x=$x+23.5
  }
$x=$x-23.5
}

@(learn) draw_ball_player $count {
  @(pencolor) 0@(,)0@(,)0
  @(repeat) $count {
    @(if) $x_1>199 {
      $x_1=24
      $y_1=$y_1-23.5
    }
    @(go) $x_1@(,) $y_1
    circle
    $x_1=$x_1 + 25
  }
}


@(learn) draw_ball_comp $count{
  @(pencolor) 0@(,)0@(,)0
  @(repeat) $count {
    @(if) $x_2>400 {
      $x_2=224
      $y_2=$y_2-23.5
    }
    @(go) $x_2@(,) $y_2
    circle
    $x_2=$x_2 + 25
  }
}


@(learn) delete_balls $d {
  @(pc) 0@(,)255@(,)255
  @(repeat) $d{
  @(if) $x<24 {
  $x=400
  $y=$y+23.5
  }
  @(go) $x@(,)$y
  @(wait) 0.4
  circle
  $x=$x-23.5
  
  }  
}
@(learn) discover_comp_pick $n@(,) $k {
  $m = ($n-1) / ($k+1)
  $var = @(round)($m)
  @(if) $var > $m { 
    $m = $var - 1
  }
  @(else) {
    $m = $var
  }
  $pick = $n-1-$m*($k+1)
  @(return) $pick
}



#The main function
@(learn) play_game {
  @(direction) 0
  
  @(while) @(true) {
      $balls=@(ask) "Enter the number of balls:"
      $max_pick=@(ask) "Enter the maximum number of balls you can pick"
    @(if) (($balls<0) @(or) ($balls>136)) @(or) (($max_pick>=$balls) @(or)   ($max_pick<=0)) {
      @(wait) 0.5
      @(message) "please enter valid number!"
      @(wait) 0.5  
    }
    @(else) { @(break) }
  }
  @(go) 0@(,)180
  @(print) "BALLS = " +  $balls
  @(go) 200@(,)180
  @(print) "max pick = " + $max_pick
  $modul = @(mod) $balls@(,) ($max_pick+1)
  print_circles $balls
  @(wait) 0.4
  $player_name=@(ask) "Enter the name of the player:"
  @(go) 0@(,) 0
  @(print) $player_name
  @(message) "Let's start the game"
  @(wait) 0.4
  $current_balls=$balls
  
    @(if) $modul==1 {
      @(message) "Start the game please."
      @(while) $current_balls > 1 {
          @(wait) 0.5
      @(while) @(true) {
          $my_pick = @(ask) "Enter the number of balls you want to pick"
          @(if) ($my_pick > $max_pick) @(or) ($my_pick <= 0) {
            @(wait) 0.5
            @(message) "invalid input!try again"
          }
          @(else) { @(break) }
      }
        @(wait) 0.5
          delete_balls  $my_pick
          draw_ball_player $my_pick
          $current_balls=$current_balls - $my_pick
          $comp_pick=$max_pick+1-$my_pick
          @(wait) 0.5
        @(message) "my turn"
        @(wait) 0.5
        delete_balls $comp_pick
        draw_ball_comp $comp_pick
        $current_balls=$current_balls -$comp_pick
      }
    }
    @(else) {
      $comp_pick = discover_comp_pick $balls@(,) $max_pick
      @(while) $current_balls > 1 { 
        @(message) "my turn"
        @(wait) 0.5
        delete_balls $comp_pick
        draw_ball_comp $comp_pick
        $current_balls=$current_balls -$comp_pick
        @(if) $current_balls==1 { @(break) }
        @(while) @(true) {
          $my_pick = @(ask) "Enter the number of balls you want to pick"
          @(if) ($my_pick > $max_pick) @(or) ($my_pick <= 0) {
            @(wait) 0.5
            @(message) "invalid input!try again"
          } @(else) { 
              @(break) 
         }
      }
        @(wait) 0.5
        delete_balls  $my_pick
        draw_ball_player $my_pick
        @(wait) 0.5
        $current_balls=$current_balls - $my_pick
        $comp_pick=$max_pick+1-$my_pick
      }
    }
  
  @(message) "You lose!!!"
  @(exit)
}

draw_canvas
play_game







